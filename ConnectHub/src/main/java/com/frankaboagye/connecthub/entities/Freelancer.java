//package com.frankaboagye.connecthub.entities;
//
//import com.frankaboagye.connecthub.enums.Gender;
//import jakarta.persistence.*;
//import lombok.AllArgsConstructor;
//import lombok.Builder;
//import lombok.Data;
//import lombok.NoArgsConstructor;
//
//import java.time.LocalDate;
//import java.util.ArrayList;
//import java.util.List;
//
///**
// * The Freelancer entity represents a freelancer in the system.
// * A freelancer can have multiple resumes and skills and is associated with
// * several other details like contact information, education, etc.
// */
//@Data
//@Builder
//@AllArgsConstructor
//@NoArgsConstructor
//@Entity
//public class Freelancer {
//
//    /**
//     * The unique ID of the freelancer.
//     * Auto-generated by the database.
//     */
//    @Id
//    @GeneratedValue(strategy = GenerationType.AUTO)
//    private Long id;
//
//    /**
//     * The email of the freelancer.
//     * This must be unique across all freelancers in the system.
//     */
//    @Column(unique = true)
//    private String email;
//
//    /**
//     * The gender of the freelancer.
//     * This is stored as a string in the database (e.g., "MALE", "FEMALE", etc.).
//     */
//    @Enumerated(EnumType.STRING)
//    private Gender gender;
//
//    /**
//     * The full name of the freelancer.
//     */
//    private String fullName;
//
//    /**
//     * The date of birth of the freelancer.
//     */
//    private LocalDate dateOfBirth;
//
//    /**
//     * The LinkedIn profile URL of the freelancer.
//     */
//    private String linkedin;
//
//    /**
//     * The phone number of the freelancer.
//     */
//    private String phoneNumber;
//
//    /**
//     * The educational background of the freelancer.
//     */
//    private String education;
//
//    /**
//     * The location of the profile picture for the freelancer.
//     */
//    private String profilepictureurl;
//
//    /**
//     * The basic charge (hourly) expected by the freelancer.
//     */
//    private Double basicCharge;
//
//    /**
//     * The password for the freelancer's account.
//     */
//    private String password;
//
//    /**
//     * The list of skills that the freelancer possesses.
//     * This is stored in a separate table called "freelancer_skills".
//     *
//     * <p>
//     * Hibernate manages the creation of both the primary Freelancer table
//     * and the additional "freelancer_skills" table automatically.
//     * </p>
//     */
//    @ElementCollection
//    @CollectionTable(name = "freelancer_skills", joinColumns = @JoinColumn(name = "freelancer_id"))
//    @Column(name = "skill")
//    private List<String> skills;
//
//    /**
//     * The list of resumes associated with the freelancer.
//     * A freelancer can have multiple resumes.
//     * <ul>
//     *     <li>Each resume is linked to the freelancer via a foreign key.</li>
//     *     <li>CascadeType.ALL ensures that any operation (save, delete, etc.)
//     *     performed on the freelancer will also be applied to the resumes.</li>
//     *     <li>orphanRemoval = true ensures that if a resume is removed from
//     *     this list, it will also be deleted from the database.</li>
//     * </ul>
//     */
////    @OneToMany(mappedBy = "freelancer", cascade = CascadeType.ALL, orphanRemoval = true)
////    @Builder.Default
////    private List<Resume> resumes = new ArrayList<>();
//
//}
